echo Setting up Harman AVBX environment
echo -----------------------------------
echo Network Configuration:
echo TODO - Use something for MAC address
setenv autoload no
echo Leaving ethaddr unconfigured
setenv ipaddr 192.168.1.1
setenv serverip 192.168.1.100

setenv crcreturn 1
setenv secsize 0x40000

echo Clobber DRAM Configuration
setenv clobstart 0x88000000
setenv clobstart_nohdr  0x88000040 # When an image is stored in DRAM with its U-Boot header, this address can get the image without the U-Boot header.
setenv temp             0x89000000 # Some location within DRAM.
setenv temp_nohdr       0x89000040 # Ditto.

setenv eraseenv 'run spiprobe;sf erase ${bootenvstart} ${bootenvsize}'

echo Boot Configuration
setenv bootcmd 'run spiprobe;sf read ${tempkernstart} ${kernstart} ${kernsize};sf read ${tempfdtstart} ${fdtstart} ${fdtsize};bootm ${tempkernstart} - ${tempfdtstart}'
setenv bootglnx 'run spiprobe; sf read ${tempkernstart} ${goldenkernstart} ${goldenkernsize}; sf read ${tempfdtstart} ${goldenfdtstart} ${goldenfdtsize}; bootm ${tempkernstart} - ${tempfdtstart}'
setenv bootdelay 3

echo Flash Map
# We can't do arithmetic on the fly in hush shell, so we have to precalculate everything.
setenv bootfpgasize     0x180000; setenv bootfpgastart     0x000000; setenv bootfpgahdr        0x177FC0
setenv goldenfdtsize    0x008000; setenv goldenfdtstart    0x178000; setenv goldenfdthdr       0x17FFC0
setenv goldenfdtsector  0x140000; setenv goldenfdtdram   0x88038000; setenv goldenfdthdrdram 0x8803FFC0
setenv unusedsize       0x040000; setenv unusedstart       0x180000
setenv bootenvsize      0x040000; setenv bootenvstart      0x1C0000
setenv bootsize         0x040000; setenv bootstart         0x200000; setenv boothdr            0x23FFC0
setenv kernsize         0x140000; setenv kernstart         0x240000
setenv goldenkernsize   0x140000; setenv goldenkernstart   0x380000
setenv romfssize        0x340000; setenv romfsstart        0x4C0000; setenv romfshdr           0x7FFFC0
setenv goldenromfssize  0x240000; setenv goldenromfsstart  0x800000; setenv goldenromfshdr     0xA3FFC0
setenv fpgasize         0x180000; setenv fpgastart         0xA40000; setenv fpgahdr            0xBB7FC0
setenv fdtsize          0x008000; setenv fdtstart          0xBB8000; setenv fdthdr             0xBBFFC0
setenv fdtsector        0xB80000; setenv fdtdram         0x88038000; setenv fdthdrdram       0x8803FFC0
setenv rootfssize       0x100000; setenv rootfsstart       0xBC0000; setenv rootfshdr          0xCBFFC0
setenv goldenrootfssize 0x100000; setenv goldenrootfsstart 0xCC0000; setenv goldenrootfshdr    0xDBFFC0
setenv settingsfssize   0x240000; setenv settingsfsstart   0xDC0000 # SettingsFS is read-write. It doesn't store a CRC. We only check once, after flashing.

echo Update Commands
# FDTs and FPGAs share sectors. These procedures properly handle
# this, so that the FDTs and FPGAs can be updated separately.
setenv bak_golden_fdt       'setenv bakstart ${goldenfdtstart};       setenv baksize ${goldenfdtsize};     run bak'
setenv bak_fdt              'setenv bakstart ${fdtstart};             setenv baksize ${fdtsize};           run bak'

setenv check_settingsfs_crc 'sf read 0x88000040 ${settingsfsstart} ${settingsfssize}; echo "\\cChecking CRC... "; crc32 0x88000040 ${settingsfssize} 0x88000000; if cmp.l 0x88000000 0x88000018 1; then echo CRC check successful.; else echo CRC check failed.; fi'

setenv update_boot_fpga     'setenv imgname labx_Avbx_Fpga-failsafe.bin.ub ;setenv imgstart ${bootfpgastart};    setenv imgsize ${bootfpgasize};    setenv hdrloc ${bootfpgahdr};    run load spiprobe bak_golden_fdt install unbak'
setenv update_golden_fdt    'setenv imgname labx_Avbx_Fpga-failsafe.bin.ub;       setenv flashsec ${goldenfdtsector};  setenv imgsize ${goldenfdtsize};   setenv hdrlocdram ${goldenfdthdrdram};setenv secoffdram ${goldenfdtdram};run load spiprobe install_in_sector'
setenv update_boot_env      'setenv imgname ub.config.img;            setenv imgstart ${bootenvstart};     setenv imgsize ${bootenvsize};                                      run load run_script'
setenv update_uboot         'setenv imgname u-boot.bin.ub;            setenv imgstart ${bootstart};        setenv imgsize ${bootsize};        setenv hdrloc ${boothdr};        run load spiprobe install'
setenv update_kernel        'setenv imgname linux.ub;                 setenv imgstart ${kernstart};        setenv imgsize ${kernsize};                                         run load spiprobe install_with_hdr'
setenv update_golden_kernel 'setenv imgname linux-golden.ub;          setenv imgstart ${goldenkernstart};  setenv imgsize ${goldenkernsize};                                   run load spiprobe install_with_hdr'
setenv update_romfs         'setenv imgname usr.romfs.ub;             setenv imgstart ${romfsstart};       setenv imgsize ${romfssize};       setenv hdrloc ${romfshdr};       run load spiprobe install'
setenv update_golden_romfs  'setenv imgname usr-golden.romfs.ub;      setenv imgstart ${goldenromfsstart}; setenv imgsize ${goldenromfssize}; setenv hdrloc ${goldenromfshdr}; run load spiprobe install'
setenv update_fpga          'setenv imgname labx_Avbx_Fpga.bin.ub;         setenv imgstart ${fpgastart};        setenv imgsize ${fpgasize};        setenv hdrloc ${fpgahdr};        run load spiprobe bak_fdt install unbak'
setenv update_fdt           'setenv imgname avbx.dtb.ub;              setenv flashsec ${fdtsector};        setenv imgsize ${fdtsize};         setenv hdrlocdram ${fdthdrdram}; setenv secoffdram ${fdtdram}; run load spiprobe install_in_sector'
setenv update_rootfs        'setenv imgname rootfs.sqfs.ub;           setenv imgstart ${rootfsstart};      setenv imgsize ${rootfssize};      setenv hdrloc ${rootfshdr};      run load spiprobe install'
setenv update_golden_rootfs 'setenv imgname rootfs-golden.sqfs.ub;    setenv imgstart ${goldenrootfsstart};setenv imgsize ${goldenrootfssize};setenv hdrloc ${goldenrootfshdr};run load spiprobe install'
setenv update_settingsfs    'setenv imgname settingsfs.jffs2.ub;      setenv imgstart ${settingsfsstart};  setenv imgsize ${settingsfssize};  setenv hdrloc ${settingsfshdr};  run load spiprobe install_no_hdr check_settingsfs_crc'
setenv update_all           'ping ${serverip}; run update_boot_env update_boot_fpga update_golden_fdt update_uboot update_kernel update_golden_kernel update_romfs update_golden_romfs update_fpga update_fdt update_rootfs update_golden_rootfs update_settingsfs'

echo Load/Install Commands
# Files are transferred over with a 64-byte U-Boot header (created by U-Boot's
# mkimage utility), which gives us automatic CRC checking. The install commands
# copy the image into flash either with that header or without it. They also
# copy the U-Boot headers to specified locations. ${filesize} and ${filesize_nohdr}
# are set by U-Boot/tftp automatically. Saves us from writing the full sector
# when our images are smaller than the sectors that they sit in.
setenv run_script       'source ${clobstart}' # The only way to have a failed command stop the next command from executing is by having those commands in variables and using 'run <var1> <var2> ...'
setenv load             'tftp ${clobstart} ${imgname}'
setenv install          'if test ${crcreturn} -eq 0; then sf erase ${imgstart} ${imgsize}; sf write ${clobstart_nohdr} ${imgstart} ${filesize_nohdr}; echo Saving header...; sf write ${clobstart} ${hdrloc} 0x40; fi'
setenv install_no_hdr   'if test ${crcreturn} -eq 0; then sf erase ${imgstart} ${imgsize}; sf write ${clobstart_nohdr} ${imgstart} ${filesize_nohdr}; fi'
setenv install_with_hdr 'if test ${crcreturn} -eq 0; then sf erase ${imgstart} ${imgsize}; sf write ${clobstart}       ${imgstart} ${filesize}; fi'

# Special install command for when an image sits somewhere within a single
# flash sector. Procedure:
#  - Copy the image, with the U-Boot header, out of the way.
#  - Load the sector from flash that will contain the image.
#  - Copy the image, without the U-Boot header, into that loaded flash sector.
#  - Copy the image header into that loaded flash sector, at its right location.
#  - Erase the relevant parts of flash.
#  - Write the sector back to flash.
setenv install_in_sector 'cp.b ${clobstart} ${temp} ${imgsize}; sf read ${clobstart} ${flashsec} ${secsize}; cp.b ${temp_nohdr} ${secoffdram} ${imgsize}; cp.b ${temp} ${hdrlocdram} 0x40; sf erase ${flashsec} ${secsize}; sf write ${clobstart} ${flashsec} ${secsize};'

# Backup and unbackup an image that sits somewhere within
# a flash sector that is going to be erased (used when an
# image sits somewhere inside a flash sector that belongs
# to another image, and that other image is about to be
# updated). ${temp} needs to be untouched between executions
# of 'bak' and 'unbak'.
setenv bak   'sf read  ${temp} ${bakstart} ${baksize}'
setenv unbak 'sf write ${temp} ${bakstart} ${baksize}'

echo Shortcuts for Development
setenv tempkernstart 0x88800000
setenv tempfdtstart 0x88700000
setenv temp_kernel 'tftp ${tempkernstart} ${kernname};tftp ${tempfdtstart} ${fdtname};bootm ${tempkernstart} - ${tempfdtstart}'
setenv spiprobe 'sf probe 0:0 40000000 3'

echo Harman AVBX Firmware Update
setenv blobname           labx_avbxUpdate.bin.ub
setenv goldenblobname     labx_avbxGoldenUpdate.bin.ub
setenv blobrunstart       0x88000040
setenv load_blob          'tftp ${clobstart} ${blobname}'
setenv load_golden_blob   'tftp ${clobstart} ${goldenblobname}'
setenv install_blob       'if test ${crcreturn} -eq 0; then source ${blobrunstart}; fi'
setenv update_blob        'run load_blob install_blob'
setenv update_golden_blob 'run load_golden_blob install_blob'

echo Saving Configurations...
saveenv

echo Configuration Completed
