echo Setting up Studer AVB-EP environment
echo -----------------------------------
echo Network Configuration:
echo TODO - Use a real OUI for MAC address
setenv autoload no
setenv ethaddr 00:0a:35:00:44:01
setenv ipaddr 192.168.1.1
setenv serverip 192.168.1.100
setenv netkargs labx_eth_llink.macaddr=0x00,0x0a,0x35,0x00,0x44,0x01

setenv crcreturn 1

echo Clobber DRAM Configuration
setenv clobstart        0x88000000
setenv clobstart_nohdr  0x88000040 # When an image is stored in DRAM with its U-Boot header, this address can get the image without the U-Boot header.
setenv temp             0x89000000 # Some location within DRAM.
setenv temp_nohdr       0x89000040 # Ditto.

setenv eraseenv 'run spiprobe;sf erase ${bootenvstart} ${bootenvsize}'

# Otherwise, Linux can't properly perform firmware updates (with this flash part).
setenv unprotect_flash 'protect off ${fpgastart} +${fpgasize}; protect off ${fdtstart} +${fdtsize}; protect off ${kernstart} +${kernsize}; protect off ${rootfsstart} +${rootfssize}; protect off ${romfsstart} +${romfssize}; protect off ${settingsfsstart} +${settingsfssize}'

echo Boot Configuration:
setenv bootcmd 'run unprotect_flash; bootm ${kernstart} - ${fdtstart}'
setenv bootglnx 'run unprotect_flash; bootm ${goldenkernstart} - ${goldenfdtstart}'
setenv bootdelay 3

echo Flash Map
# We can't do arithmetic on the fly in hush shell, so we have to precalculate everything.
# Note that other projects have configurations where images share flash sectors (such as
# the FDT lying at the end of the FPGA sector). They have additional variables and
# commands that handle these situations.
setenv bootfpgasize     0x280000; setenv bootfpgastart     0x86000000; setenv bootfpgahdr        0x8627FFC0
setenv fpgasize         0x280000; setenv fpgastart         0x86280000; setenv fpgahdr            0x864FFFC0
setenv bootsize         0x040000; setenv bootstart         0x86500000; setenv boothdr            0x8653FFC0
setenv bootenvsize      0x020000; setenv bootenvstart      0x86540000
setenv goldenfdtsize    0x020000; setenv goldenfdtstart    0x86560000; setenv goldenfdthdr       0x8657FFC0
setenv goldenkernsize   0x180000; setenv goldenkernstart   0x86580000
setenv goldenrootfssize 0x100000; setenv goldenrootfsstart 0x86700000; setenv goldenrootfshdr    0x867FFFC0
setenv goldenromfssize  0x280000; setenv goldenromfsstart  0x86800000; setenv goldenromfshdr     0x86A7FFC0
setenv fdtsize          0x020000; setenv fdtstart          0x87000000; setenv fdthdr             0x8701FFC0
setenv kernsize         0x180000; setenv kernstart         0x87080000
setenv rootfssize       0x100000; setenv rootfsstart       0x87200000; setenv rootfshdr          0x872FFFC0
setenv romfssize        0x380000; setenv romfsstart        0x87300000; setenv romfshdr           0x8767FFC0
setenv settingsfssize   0x280000; setenv settingsfsstart   0x87680000 # SettingsFS is read-write. It doesn't store a CRC. We only check once, after flashing.

echo Update Commands
setenv check_settingsfs_crc 'cp.b ${settingsfsstart} 0x88000040 ${settingsfssize}; echo "\\cChecking CRC... "; crc32 0x88000040 ${settingsfssize} 0x88000000; if cmp.l 0x88000000 0x88000018 1; then echo CRC check successful.; else echo CRC check failed.; fi'

setenv update_boot_fpga     'run set_boot_fpga_name;              setenv imgstart ${bootfpgastart};    setenv imgsize ${bootfpgasize};    setenv hdrloc ${bootfpgahdr};    run load install'
setenv update_golden_fdt    'run set_golden_fdt_name;             setenv imgstart ${goldenfdtstart};   setenv imgsize ${goldenfdtsize};   setenv hdrloc ${goldenfdthdr};   run load install'
setenv update_boot_env      'setenv imgname ub.config.img;        setenv imgstart ${bootenvstart};     setenv imgsize ${bootenvsize};                                      run load run_script'
setenv update_uboot         'setenv imgname u-boot.bin.ub;        setenv imgstart ${bootstart};        setenv imgsize ${bootsize};        setenv hdrloc ${boothdr};        run load install'
setenv update_kernel        'setenv imgname linux.ub;             setenv imgstart ${kernstart};        setenv imgsize ${kernsize};                                         run load install_with_hdr'
setenv update_golden_kernel 'setenv imgname linux-golden.ub;      setenv imgstart ${goldenkernstart};  setenv imgsize ${goldenkernsize};                                   run load install_with_hdr'
setenv update_romfs         'setenv imgname usr.romfs.ub;         setenv imgstart ${romfsstart};       setenv imgsize ${romfssize};       setenv hdrloc ${romfshdr};       run load install'
setenv update_golden_romfs  'setenv imgname usr-golden.romfs.ub;  setenv imgstart ${goldenromfsstart}; setenv imgsize ${goldenromfssize}; setenv hdrloc ${goldenromfshdr}; run load install'
setenv update_fpga          'run set_fpga_name;                   setenv imgstart ${fpgastart};        setenv imgsize ${fpgasize};        setenv hdrloc ${fpgahdr};        run load install'
setenv update_fdt           'run set_fdt_name;                    setenv imgstart ${fdtstart};         setenv imgsize ${fdtsize};         setenv hdrloc ${fdthdr};         run load install'
setenv update_rootfs        'setenv imgname rootfs.sqfs.ub;       setenv imgstart ${rootfsstart};      setenv imgsize ${rootfssize};      setenv hdrloc ${rootfshdr};      run load install'
setenv update_golden_rootfs 'setenv imgname rootfs-golden.sqfs.ub;setenv imgstart ${goldenrootfsstart};setenv imgsize ${goldenrootfssize};setenv hdrloc ${goldenrootfshdr};run load install'
setenv update_settingsfs    'setenv imgname settingsfs.jffs2.ub;  setenv imgstart ${settingsfsstart};  setenv imgsize ${settingsfssize};                                   run load install_no_hdr check_settingsfs_crc'
setenv update_all           'ping ${serverip}; run update_boot_env update_boot_fpga update_golden_fdt update_uboot update_kernel update_golden_kernel update_romfs update_golden_romfs update_fpga update_fdt update_rootfs update_golden_rootfs update_settingsfs'

setenv set_boot_fpga_name  'if itest.b 0x40 -eq "*0x820f0000 & 0x10000"; then setenv imgname Avb_EP_Fpga-EP384-golden.bin.ub; else setenv imgname Avb_EP_Fpga-EP64-golden.bin.ub; fi'
setenv set_fpga_name       'if itest.b 0x40 -eq "*0x820f0000 & 0x10000"; then setenv imgname Avb_EP_Fpga-EP384.bin.ub;        else setenv imgname Avb_EP_Fpga-EP64.bin.ub;        fi'
setenv set_golden_fdt_name 'if itest.b 0x40 -eq "*0x820f0000 & 0x10000"; then setenv imgname avb_ep_384-golden.dtb.ub;        else setenv imgname avb_ep_64-golden.dtb.ub;        fi'
setenv set_fdt_name        'if itest.b 0x40 -eq "*0x820f0000 & 0x10000"; then setenv imgname avb_ep_384.dtb.ub;               else setenv imgname avb_ep_64.dtb.ub;               fi'

echo Load/Install Commands
# Files are transferred over with a 64-byte U-Boot header (created by U-Boot's
# mkimage utility), which gives us automatic CRC checking. The install commands
# copy the image into flash either with that header or without it. They also
# copy the U-Boot headers to specified locations. ${filesize} and ${filesize_nohdr}
# are set by U-Boot/tftp automatically. Saves us from writing the full sector
# when our images are smaller than the sectors that they sit in.
setenv run_script       'source ${clobstart}' # The only way to have a failed command stop the next command from executing is by having those commands in variables and using 'run <var1> <var2> ...'
setenv load             'tftp ${clobstart} ${imgname}'
setenv install          'if test ${crcreturn} -eq 0; then protect off ${imgstart} +${imgsize}; erase ${imgstart} +${imgsize}; cp.b ${clobstart_nohdr} ${imgstart} ${filesize_nohdr}; echo Saving header...; cp.b ${clobstart} ${hdrloc} 0x40; fi'
setenv install_no_hdr   'if test ${crcreturn} -eq 0; then protect off ${imgstart} +${imgsize}; erase ${imgstart} +${imgsize}; cp.b ${clobstart_nohdr} ${imgstart} ${filesize_nohdr}; fi'
setenv install_with_hdr 'if test ${crcreturn} -eq 0; then protect off ${imgstart} +${imgsize}; erase ${imgstart} +${imgsize}; cp.b ${clobstart}       ${imgstart} ${filesize}; fi'

echo Shortcuts for Development:
setenv tempkernstart 0x88800000
setenv tempfdtstart 0x88700000
setenv temp_kernel 'tftp ${tempkernstart} ${kernname};setenv imgname avb_ep_64.dtb; tftp ${tempfdtstart} ${imgname};bootm ${tempkernstart} - ${tempfdtstart}'

echo Firmware Update Configuration
setenv blobname avbEpUpdate.bin.ub
setenv goldenblobname avbEpGoldenUpdate.bin.ub
setenv blobrunstart 0x88000040
setenv ipset 'setenv ipaddr 192.168.1.1; setenv serverip 192.168.1.100; ping ${serverip}'
setenv load_blob 'tftp ${clobstart} ${blobname}'
setenv load_golden_blob 'tftp ${clobstart} ${goldenblobname}'
setenv install_blob 'if test ${crcreturn} -eq 0; then source ${blobrunstart}; fi'
setenv update_blob run load_blob install_blob
setenv update_golden_blob run load_golden_blob install_blob

echo Saving Configurations...
saveenv

echo Configuration Completed
