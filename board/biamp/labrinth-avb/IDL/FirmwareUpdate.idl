
#ifndef __FIRMWARE_UPDATE_IDL__
#define __FIRMWARE_UPDATE_IDL__

#include "AvbDefs.idl"

module FirmwareUpdate
{
  typedef sequence<uint8_t> FwData;

  /* Enumerated type for generic error codes which may be returned */
  enum ErrorCode
  {
    e_EC_SUCCESS,
    e_EC_INVALID_CLASS_CODE,
    e_EC_INVALID_INSTANCE,
    e_EC_INVALID_SERVICE_CODE,
    e_EC_INVALID_ATTRIBUTE_CODE,
    e_EC_UPDATE_ALREADY_IN_PROGRESS,
    e_EC_UPDATE_NOT_IN_PROGRESS,
    e_EC_CORRUPT_IMAGE,
    e_EC_NOT_EXECUTED,
    e_EC_IMAGE_ALREADY_PRESENT
  };

  /* Enumerated type used to identify the context (bootloader or Linux) */
  enum CodeImageType
  {
    e_CODE_IMAGE_BOOT,
    e_CODE_IMAGE_MAIN
  };

  /* Enumerated type identifying each of the run-time images which may
   * may be updated for the board.
   */
  enum RuntimeImageType
  {
    e_IMAGE_FPGA,
    e_IMAGE_KERNEL,
    e_IMAGE_ROOTFS,
    e_IMAGE_USER_ROMFS,
    e_IMAGE_DEVICE_TREE,
    e_IMAGE_NUM_TYPES
  };

  interface Services
  {
      
    /**
     * Issues an arbitrary string command to U-Boot, independent of any firmware
     * update context.
     *
     * @param cmd - String command to send to U-Boot immediately
     */
    ErrorCode sendCommand(in string cmd);

    /**
     * Begins a firmware update of a single run-time image, which consists of 
     * this call, followed by mutiple calls to sendDataPacket().  Once "length"
     * bytes of data have been sent in packets, the command specified within 
     * "cmd" is invoked within U-Boot.
     *
     * After the command has been invoked, the imagecrcs sector is updated
     * with the firmware revision and CRC32 for the image.  During a normal
     * boot, this sector is checked for coherent revisions, and each image
     * in Flash is checked against its declared CRC32.
     *
     * @param image    - Enumerated value identifying which run-time image is
     *                   being updated
     * @param cmd      - String command to invoke after all data has been sent
     * @param length   - Length, in bytes, of the data image which will be sent
     * @param revision - Revision quadlet for the image
     * @param crc      - Expected CRC32 for the data to be checked
     *
     * @return e_EC_SUCCESS upon success, e_EC_CORRUPT_IMAGE if CRC check failed.
     */
    ErrorCode startFirmwareUpdate(in RuntimeImageType image,
                                  in string cmd, 
                                  in uint32_t length, 
                                  in uint32_t revision,
                                  in uint32_t crc);

    /**
     * Sends a packet of data for a firmware image using a sequence type.
     * This must only be called as a followup to a previous invocation of startFirmwareUpdate().
     *
     * @param data - Byte sequence constituting the packet of image data being sent
     *
     * @return e_EC_SUCCESS upon success, e_EC_UPDATE_NOT_IN_PROGRESS if no
     *         firmware update context is in progress.
     */
    ErrorCode sendDataPacket(in FwData data);
  };

  interface Attributes
  {
    /**
     * Attribute identifying the execution context
     */
    ErrorCode ExecutingImageType(out CodeImageType value);
  };
};

#endif // __FIRMWARE_UPDATE_IDL__

// vi:set ai sw=4 expandtab ts=4:

